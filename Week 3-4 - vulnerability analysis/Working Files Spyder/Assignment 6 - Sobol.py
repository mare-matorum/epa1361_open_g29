#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue May 11 13:04:02 2021

@author: wenyuc
"""

from ema_workbench import MultiprocessingEvaluator
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import statsmodels.api as sm
from patsy.highlevel import dmatrices

from ema_workbench import (Model, RealParameter, TimeSeriesOutcome, ScalarOutcome, perform_experiments, ema_logging, SequentialEvaluator)
from ema_workbench.analysis import plotting, plotting_util
from ema_workbench.em_framework.evaluators import LHS, SOBOL, MORRIS

from ema_workbench.analysis import feature_scoring
from ema_workbench.analysis.scenario_discovery_util import RuleInductionType
from ema_workbench.em_framework.salib_samplers import get_SALib_problem
from SALib.analyze import sobol

from ema_workbench import ema_logging
ema_logging.log_to_stderr(ema_logging.INFO)

def pred_prey(prey_birth_rate=0.025, predation_rate=0.0015, predator_efficiency=0.002,
             predator_loss_rate=0.06, initial_prey=50, initial_predators=20, dt=0.25, 
             final_time=365, reps=1):

    #Initial values
    predators = np.zeros((reps, int(final_time/dt)+1))
    prey = np.zeros((reps, int(final_time/dt)+1))
    sim_time = np.zeros((reps, int(final_time/dt)+1))
    
    for r in range(reps):

        predators[r,0] = initial_predators
        prey[r,0] = initial_prey

    #Calculate the time series
    for t in range(0, sim_time.shape[1]-1):

        dx = (prey_birth_rate*prey[r,t]) - (predation_rate*prey[r,t]*predators[r,t])
        dy = (predator_efficiency*predators[r,t]*prey[r,t]) - (predator_loss_rate*predators[r,t])

        prey[r,t+1] = max(prey[r,t] + dx*dt, 0)
        predators[r,t+1] = max(predators[r,t] + dy*dt, 0)
        sim_time[r,t+1] = (t+1)*dt
    
    #Return outcomes
    return {'TIME':sim_time,
            'predators':predators,
            'prey':prey}


#instantiate the model again for Sobol analysis because I don't know how to 
#apply the model.instance here

# Performs sobol analysis on experiment result (model_output) using SALib
def perform_SALib_sobol(model, model_output, output_name, subplot):
    # Returns a dict with a problem specificatin as required by SALib
    problem = get_SALib_problem(model.uncertainties)
    Si = sobol.analyze(problem, model_output, calc_second_order=True, print_to_console=False)
    
    # If the total-order indices are substantially larger than the first-order indices,
    # then there is likely higher-order interactions occurring. We can look at the second-order indices 
    # to see these higher-order interactions
        
    scores_filtered = {k:Si[k] for k in ['ST','ST_conf','S1','S1_conf']}
    Si_df = pd.DataFrame(scores_filtered, index=problem['names'])
    Si_df.sort_values(by='ST',ascending=False)
    
    sns.set_style('white')
    
    indices = Si_df[['S1','ST']]
    err = Si_df[['S1_conf','ST_conf']]
    
    indices.plot.bar(yerr=err.values.T,ax=subplot)
    
    print("\n" + output_name)
    
    print("")
    
    print(Si_df)

# Performs experiment using EMA workbench on a specified model instance for N scenarios
def perform_EMA_sobol_experiment(model, N):
    
    model.uncertainties = [RealParameter('prey_birth_rate', 0.015, 0.035),
                         RealParameter('predation_rate', 0.0005, 0.003),
                         RealParameter('predator_efficiency', 0.001, 0.004),
                         RealParameter('predator_loss_rate', 0.04, 0.08)]
    
   
    # We assume that Sobol sampling automatically performs N * (2D+2) scenarios.
    # Therefore, we do not perform this calculation.
    # number_uncertainties = 4
    # total_scenarios = N * (2*number_uncertainties + 2)

    total_scenarios = N
    
    model.outcomes = [TimeSeriesOutcome('TIME', function=np.squeeze),
                    TimeSeriesOutcome('predators', function=np.squeeze),
                    TimeSeriesOutcome('prey', function=np.squeeze)]
        
    #N * (2D+2) scenarios, where D is the number of uncertain parameters, 
    #and N is the value for scenarios passed to perform_experiments
    
    
    experiments, outcomes = perform_experiments(model, scenarios=total_scenarios, uncertainty_sampling='sobol')
    
    # Store final values of prey outcome
    prey_final= []
    prey_mean = []
    prey_std = []
    
    # Iterate through rows of outcome numpy array (experiments) to calculate indicators
    for experiment_row in outcomes["prey"]:
        prey_final.append(experiment_row[-1]) # Get last element
        prey_mean.append(np.mean(experiment_row))
        prey_std.append(np.std(experiment_row))
    
    # Collect indicators in dictionary to calculate regression for each of them
    #indicators = {'prey_final':prey_final, 'prey_mean':prey_mean, 'prey_std':prey_std}
        
    # Convert outputs to numpy array 
    prey_final_np = np.array(prey_final)
    prey_mean_np = np.array(prey_mean)   
    prey_std_np = np.array(prey_std)
    
    # Create plots including subplots
    fig1 = plt.figure()
    fig1.tight_layout()
    fig1.set_size_inches(20, 10)

    ax1 = fig1.add_subplot(131)
    ax2 = fig1.add_subplot(132, sharey=ax1)
    ax3 = fig1.add_subplot(133, sharey=ax1)
    
    # Perform sobol analysis on experiment result using SALib for every output of interest
    perform_SALib_sobol(model, prey_final_np, "Final value of prey", ax1)
    perform_SALib_sobol(model, prey_mean_np, "Mean value of prey", ax2)
    perform_SALib_sobol(model, prey_std_np, "Standard deviation of prey", ax3)

modelPredPrey = Model('PredPreyGSA', function=pred_prey) 

number_scenarios = 50
print("Performing {} scenarios:".format(number_scenarios))
perform_EMA_sobol_experiment(modelPredPrey, number_scenarios)

number_scenarios = 250
print("Performing {} scenarios:".format(number_scenarios))
perform_EMA_sobol_experiment(modelPredPrey, number_scenarios)

number_scenarios = 1000
print("Performing {} scenarios:".format(number_scenarios))
perform_EMA_sobol_experiment(modelPredPrey, number_scenarios)
